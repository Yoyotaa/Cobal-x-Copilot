#!/usr/bin/env python3
"""
Script de d√©monstration pour le syst√®me bancaire converti de COBOL vers Python.
Ce script montre les fonctionnalit√©s principales de l'application.
"""

import sys
import os
from operations import BankOperations
from data_manager import DataManager


def demo_basic_operations():
    """D√©monstration des op√©rations de base."""
    print("=" * 60)
    print("D√âMONSTRATION DU SYST√àME BANCAIRE COBOL ‚Üí PYTHON")
    print("=" * 60)
    
    # Cr√©er une instance avec un fichier temporaire pour la d√©mo
    demo_file = "demo_account.json"
    if os.path.exists(demo_file):
        os.remove(demo_file)
    
    data_manager = DataManager(demo_file)
    operations = BankOperations(data_manager)
    
    print("\n1. CONSULTATION DU SOLDE INITIAL")
    print("-" * 40)
    operations.view_balance()
    
    print("\n2. CR√âDIT DE COMPTE")
    print("-" * 40)
    operations.credit_account(500.00)
    
    print("\n3. D√âBIT DE COMPTE (FONDS SUFFISANTS)")
    print("-" * 40)
    operations.debit_account(200.00)
    
    print("\n4. D√âBIT DE COMPTE (FONDS INSUFFISANTS)")
    print("-" * 40)
    operations.debit_account(2000.00)
    
    print("\n5. CR√âDIT AVEC MONTANT N√âGATIF")
    print("-" * 40)
    operations.credit_account(-100.00)
    
    print("\n6. SOLDE FINAL")
    print("-" * 40)
    operations.view_balance()
    
    # Nettoyage
    if os.path.exists(demo_file):
        os.remove(demo_file)
    
    print("\n" + "=" * 60)
    print("D√âMONSTRATION TERMIN√âE")
    print("=" * 60)


def demo_data_persistence():
    """D√©monstration de la persistance des donn√©es."""
    print("\n" + "=" * 60)
    print("D√âMONSTRATION DE LA PERSISTANCE DES DONN√âES")
    print("=" * 60)
    
    demo_file = "persistence_demo.json"
    if os.path.exists(demo_file):
        os.remove(demo_file)
    
    print("\nSession 1 - Cr√©ation et modification du compte")
    print("-" * 50)
    data_manager1 = DataManager(demo_file)
    operations1 = BankOperations(data_manager1)
    
    print("Solde initial:")
    operations1.view_balance()
    
    print("\nCr√©dit de 750‚Ç¨:")
    operations1.credit_account(750.00)
    
    print("\nSession 2 - R√©cup√©ration des donn√©es")
    print("-" * 50)
    data_manager2 = DataManager(demo_file)
    operations2 = BankOperations(data_manager2)
    
    print("Solde r√©cup√©r√©:")
    operations2.view_balance()
    
    print("\nD√©bit de 250‚Ç¨:")
    operations2.debit_account(250.00)
    
    print("\nSession 3 - V√©rification finale")
    print("-" * 50)
    data_manager3 = DataManager(demo_file)
    operations3 = BankOperations(data_manager3)
    
    print("Solde final:")
    operations3.view_balance()
    
    # Nettoyage
    if os.path.exists(demo_file):
        os.remove(demo_file)
    
    print("\n" + "=" * 60)
    print("PERSISTANCE D√âMONTR√âE AVEC SUCC√àS")
    print("=" * 60)


def demo_error_handling():
    """D√©monstration de la gestion d'erreurs."""
    print("\n" + "=" * 60)
    print("D√âMONSTRATION DE LA GESTION D'ERREURS")
    print("=" * 60)
    
    demo_file = "error_demo.json"
    if os.path.exists(demo_file):
        os.remove(demo_file)
    
    data_manager = DataManager(demo_file)
    operations = BankOperations(data_manager)
    
    print("\n1. Test avec montant n√©gatif pour cr√©dit")
    print("-" * 45)
    operations.credit_account(-50.00)
    
    print("\n2. Test avec montant n√©gatif pour d√©bit")
    print("-" * 45)
    operations.debit_account(-30.00)
    
    print("\n3. Test avec d√©bit sup√©rieur au solde")
    print("-" * 45)
    operations.debit_account(2000.00)
    
    print("\n4. Test de persistance avec fichier corrompu")
    print("-" * 45)
    # Cr√©er un fichier corrompu
    with open(demo_file, 'w') as f:
        f.write("invalid json content")
    
    # Le gestionnaire doit r√©cup√©rer gracieusement
    data_manager_corrupted = DataManager(demo_file)
    operations_corrupted = BankOperations(data_manager_corrupted)
    operations_corrupted.view_balance()
    
    # Nettoyage
    if os.path.exists(demo_file):
        os.remove(demo_file)
    
    print("\n" + "=" * 60)
    print("GESTION D'ERREURS D√âMONTR√âE AVEC SUCC√àS")
    print("=" * 60)


def main():
    """Fonction principale de d√©monstration."""
    try:
        print("üöÄ D√âMARRAGE DE LA D√âMONSTRATION")
        print("Cette d√©monstration montre la conversion COBOL ‚Üí Python")
        
        # D√©monstrations
        demo_basic_operations()
        demo_data_persistence()
        demo_error_handling()
        
        print("\n‚úÖ TOUTES LES D√âMONSTRATIONS TERMIN√âES AVEC SUCC√àS")
        print("\nüìã R√âSUM√â DES FONCTIONNALIT√âS D√âMONTR√âES:")
        print("   ‚Ä¢ Consultation du solde")
        print("   ‚Ä¢ Cr√©dit de compte")
        print("   ‚Ä¢ D√©bit de compte")
        print("   ‚Ä¢ Validation des montants")
        print("   ‚Ä¢ Gestion des fonds insuffisants")
        print("   ‚Ä¢ Persistance des donn√©es")
        print("   ‚Ä¢ Gestion d'erreurs robuste")
        
        print("\nüéØ L'APPLICATION PYTHON PR√âSERVE TOUTES LES FONCTIONNALIT√âS COBOL")
        print("   tout en apportant des am√©liorations significatives!")
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la d√©monstration: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
